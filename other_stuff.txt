Other Stuff (And addressing some of the smaller, but interesting points taken up by the reviewers):

-> reviewer A, B and C: please refer to 1st response.

-> reviewer D:

- Small increment over Meld: we agree that this is true on the surface since the language is actually the same, but we do not agree that this is a point against since the language is able to describe normal computation and coordination using the same constructs. However, the runtime system actually looks quite different because now we have to deal with programmable scheduling and data partitioning. These two coordination mechanisms required significant changes in the implementation and compilation with the introduction of different queues for nodes and the ability to move and pin nodes to threads.
- CLM target: our current target is shared memory multi-cores. However the CLM programming model fits and is easily ported to clusters of computers. Itâ€™s just a matter of implementing a suitable runtime system for those architectures.
- Contribution of CLM: Galois and many others are not declarative programming languages. CLM solves a problem of programming language design by seamlessly combining computation and coordination into a single declarative programming model. Galois is a runtime system and does not solve this particular design problem.
- Technical challenges: there is a PL design language: how to design a declarative language that allows the programmer to dynamically coordinate execution while keeping the language declarative; we show that linear logic allows us to do this easily. There is an implementation challenge where we had to add support for all the coordination directives.
- Proofs: for most programs they do not complicate the proofs. However, for programs such as SBP, you have to take coordination into account because it changes how the program is computed.

Reviewer E:

- Programming efficiency: true, but we see this as a positive point since most declarative languages do not allow such control.
- Data layout: the data layout/node placement is changed by using action facts such as set-cpu or set-static. Set-cpu moves the node to another thread while set-static pins the node to a thread.
- inplace update: it can be done by analyzing how facts are used in the rules. If one fact fires a rule that updates the argument of another fact, then we could compile code that would update directly the argument of such fact instead of performing standard rule derivation.
- The difference between Regular/Regular, Coordinated/Coordinated, Coordinated/Regular:
   - Regular/Regular: speedup of the unannotated (e.g.., regular) program on n-processors over the unannotated program on 1 processor.
   - Coordinated/Regular: speedup of the coordinated program on       n-processors over the unannotated (e.g., regular program) on 1       processor.
   - Coordinated/Coordinated: speedup of the coordinated program on       n-processors over the coordinated program on 1 processor.

We thank the reviewers for the time and expertise they have invested in these reviews.
We will happily take advice from the committee how we should improve our paper.
